import { rand } from "@ThreeSketch/utils/rand";

// ODE stands for Ordinary differential equation
// Coord is generated by Explicit Euler Method
class ODEMovingObject {
  constructor(dx, dy, dz, x, y, z) {
    this.dx = dx;
    this.dy = dy;
    this.dz = dz;
    this.x = x;
    this.y = y;
    this.z = z;
    this.w_speed = rand(1, 1);
  }

  // apply=true if you want to update new coordinates for object
  updatePos(dt, apply = false) {
    dt = this.w_speed * dt;
    if (apply) {
      this.x = this.x + this.dx(this.x, this.y, this.z, dt);
      this.y = this.y + this.dy(this.x, this.y, this.z, dt);
      this.z = this.z + this.dz(this.x, this.y, this.z, dt);
      return { x: this.x, y: this.y, z: this.z };
    }
    return {
      x: this.x + this.dx(this.x, this.y, this.z, dt),
      y: this.y + this.dy(this.x, this.y, this.z, dt),
      z: this.z + this.dz(this.x, this.y, this.z, dt),
    };
  }

  getPos() {
    return { x: this.x, y: this.y, z: this.z };
  }
}

export function genODEMovingObjects(numMovingObjects) {
  const a = 0.44,
    b = 1.1,
    c = 1;
  // ODEs
  let dx = (x, y, z, dt) => y * dt;
  let dy = (x, y, z, dt) => z * dt;
  let dz = (x, y, z, dt) => (-c * x - b * y - a * z + x * x) * dt;

  const res = [];
  // init random particles in cube (-0.2, -0.2, -0.2) to (0.2, 0.2, 0.2)
  for (let i = 0; i < numMovingObjects; i++) {
    res.push(
      new ODEMovingObject(
        dx,
        dy,
        dz,
        rand(-0.2, 0.2),
        rand(-0.2, 0.2),
        rand(-0.2, 0.2)
      )
    );
  }
  return res;
}

export class ODEObjectSystem {
  constructor() {}

  init(numMovingObjects) {
    this.numMovingObjects = numMovingObjects;
    this.movingObjects = genODEMovingObjects(numMovingObjects);
    this.startTime = Date.now();
    this.lastTime = Date.now();
  }

  update() {
    const curTime = Date.now();
    for (let i = 0; i < this.numMovingObjects; i++) {
      let dt = (curTime - this.lastTime) / 500;
      if (dt > 0.002) dt = 0.02;
      this.movingObjects[i].updatePos(dt, true);
    }

    this.lastTime = curTime;
  }
}
